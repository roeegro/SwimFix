
# <center> SwimFix<br> Maintenance Guide</center>

## Table of Contents
1. [Introduction](#Introduction)
2. [Client Side](#)
	* [Routes File](#)
	* [Video Trimmer](#)
	* [Test Generator](#)
	* [File Management](#)
4. [Server Side](#)
	* [Supported Functionality](#)
	* [File Management](#)
	* [Configurations](#)
5. [Adding Functionality](#)
6. [Assimilation on New Hardware](#)

## Introduction
Our system has 3 main parts. The first one is the training infrastructure.
For more details, [click here](https://github.com/roeegro/SwimFix/tree/master/training).

The other 2 parts are used for the SwimFix web application and they include a web client part and a server for analysis and evaluation. Both parts written in Python and connect each other with TCP conneciton.

<Join here project hierarchy chart>


## Client Side
The client side is a web interface which supports 2 types of users : usual and admin ones. Usual user interface supports upload of video to the server (for analysis), view data and feedback about technique of previous swimming videos and also participate in forum. Admin users can also add tests and run them in the system in order to examine system's performance. More details about the user interface can be found in this [link](https://github.com/roeegro/SwimFix/tree/master/client).
We used Flask, a python web framework, to write the client side. This library enables the developers to load dynamically web pages with python code, define relations between pages, and even pass parameters from python code to html one.
**![](https://lh3.googleusercontent.com/4rXSsvwTc9hLFd1cDh10kOJAbYD8C5u8kpMKvfwv8FwKyc7tHST1vAkngfZQKVJ80fauS_ijGFq1a8o5vFiXhwmUgjRJLWGGn0v4FTWR0pOMUN93w08Oxol031Lci7-cEo18N8n6)

### Routes File
This is the most important module in the client side. It defines the web links of all the pages and binds them to the relevant html page (appears in templates directory). For each html page, there must be found a function in this .py file which looks as follows:

    @app.route('/', methods=['GET', 'POST'])  
    @app.route("/<page-name>", methods=['GET', 'POST'])  
    def page_name():
		    <some code>  
           return render_template('page-name.html')

The first line denotes that it is the home page of the site,
The second line binds between the url address to the function below,
Each function must return a redirection to some html page to be loaded in the browser.

**Note**: This guide is related on training a model on a COCO formatted custom data **only**. 


### Video Trimmer

### Test Generator



<!--stackedit_data:
eyJoaXN0b3J5IjpbLTE1MDQ3MjU1NzgsLTExMjI0MjExMzksLT
Q3Nzg0MDM1MiwtNjgzODEyMjUwLC04Njk4ODQxNjksLTI1OTEx
NjI1NywtNDIwNDczMjM1LC0xNDg1NTgzOTc3LC0xNzQyMzE5MT
cxLC0yMTE2NjQ0OTk5LC0xMTUwNTUyMDg4LC0zMzI0NTUzNjNd
fQ==
-->